if(i%%2==0)
newlist[i]<-"Hello everyone, this is a set test."
else
newlist[i]<-"Hello everyone, this is also a set test."
i<-i+1
}
newset<-canonicalize_set_and_mapping(newlist)
newset[1]
# filename="Johnson's Baby twitterSearch(New).txt"
# dat<-read.table(file=filename, col.names = c("message"),sep="\n")
# deduped.data <- unique( dat[['message']] )
# cat(iconv(deduped.data,to="UTF-8",sub=""),file = paste("No_Dup",filename),append = TRUE)
library(sets)
newlist<-list()
i<-1
while(i<=25)
{
if(i%%2==0)
newlist[i]<-"Hello everyone, this is a set test."
else
newlist[i]<-"Hello everyone, this is also a set test."
i<-i+1
}
newset<-canonicalize_set_and_mapping(newlist)
newset[1][1]
# filename="Johnson's Baby twitterSearch(New).txt"
# dat<-read.table(file=filename, col.names = c("message"),sep="\n")
# deduped.data <- unique( dat[['message']] )
# cat(iconv(deduped.data,to="UTF-8",sub=""),file = paste("No_Dup",filename),append = TRUE)
library(sets)
newlist<-list()
i<-1
while(i<=25)
{
if(i%%2==0)
newlist[i]<-"Hello everyone, this is a set test."
else
newlist[i]<-"Hello everyone, this is also a set test."
i<-i+1
}
newset<-canonicalize_set_and_mapping(newlist)
newset$value
# filename="Johnson's Baby twitterSearch(New).txt"
# dat<-read.table(file=filename, col.names = c("message"),sep="\n")
# deduped.data <- unique( dat[['message']] )
# cat(iconv(deduped.data,to="UTF-8",sub=""),file = paste("No_Dup",filename),append = TRUE)
library(sets)
newlist<-list()
i<-1
while(i<=25)
{
if(i%%2==0)
newlist[i]<-"Hello everyone, this is a set test."
else
newlist[i]<-"Hello everyone, this is also a set test."
i<-i+1
}
newset<-canonicalize_set_and_mapping(newlist)
newset[1]
install.packages("shiny")
shiny::runApp('Shiny Demos')
runApp()
runApp('Shiny Demos/ShinyCrawler')
runApp('Shiny Demos/ShinyCrawler')
runApp('Shiny Demos/ShinyCrawler')
runApp('Shiny Demos/ShinyCrawler')
runApp('Shiny Demos/ShinyCrawler')
runApp('Shiny Demos/ShinyCrawler')
runApp('Shiny Demos/ShinyCrawler')
runApp('Shiny Demos/ShinyCrawler')
runApp('Shiny Demos/ShinyCrawler')
runApp('Shiny Demos/ShinyCrawler')
runApp('Shiny Demos/ShinyCrawler')
install.packages("dplyr")
runApp('Shiny Demos/ShinyCrawler')
runApp('Shiny Demos/ShinyCrawler')
runApp('Shiny Demos/ShinyCrawler')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
shiny::runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
shiny::runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
shiny::runApp('Shiny Demos/FinalProject')
shiny::runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
cleanText(filename)
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(xml2)
#Libraries used: RedditExtractoR
library("RedditExtractoR")
#Initiate message for start of log file
library(XML)
unescape_html <- function(str){
xml2::xml_text(xml2::read_html(paste0("<x>", str, "</x>")))
}
cleanText<-function(opfile)
{
file_name<-opfile
outputfile<-gsub(".txt","(CleanOutput).txt",opfile)
cat(outputfile)
# conn<-file(file_name,open="r")
# outp=readLines(conn)
# l<-length(outp)
# i<-1
# mess<-""
# while(i<=l)
# {
#   temp<-iconv(outp[i],to="ASCII",sub="")
#   temp<-unescape_html(temp)
#   if(temp!="")
#     mess<-paste0(mess,"\n",temp)
#   i<-i+1
# }
# newlist<-unlist(strsplit(mess,"\n",fixed = TRUE))
# finallist<-list()
# i<-1
# j<-1
# nspace<-1
# l<-length(newlist)
# cat("Length of newlist",l)
# while(i<=l)
# {
#   #cat("Line ",newlist[i],"\n")
#   text1<-newlist[i]
#   #cat(typeof(text1),length(text1),"\n")
#   templist<-unlist(strsplit(text1,split = ""))
#   alphanums<-length(grep(pattern = "[:alnum:]",x = templist))
#   if(alphanums>5)
#   {
#     finallist[j]<-text1
#     j<-j+1
#   }
#   #cat("\nNumber of alphanums ",,"\n")
#   #cat(text1,"\n")
#   i<-i+1
# }
# l<-length(finallist)
# cat(l,"\n")
# i<-1
# finmess<-""
# while(i<=l)
# {
#   finmess<-paste0(finmess,finallist[i],"\n")
#   i<-i+1
# }
# cat(finmess,file=outputfile)
#
# close(conn)
}
searchFB<-function(filename)
{
me<-paste("Searching in", filename)
print(me)
}
searchTW<-function(filename)
{
me<-paste("Searching in", filename)
print(me)
}
#Author: TCS EIS OT Group 1
#Set start time for log file
searchRD<-function(inpfile,opfile)
{start_time<-Sys.time()
#Libraries used: RedditExtractoR
library("RedditExtractoR")
#Initiate message for start of log file
msg=""
#Input File
keyword_file<-inpfile
#opening input file in read mode
conn<-file(keyword_file,open="r")
#read file line after line
searchstr=readLines(conn)
#file which stores the time_log of the entire search
k<-1
lvalue<-paste("Searching for",searchstr[k])
pb <- winProgressBar(title="Searching Reddit.This may take a while...", label=lvalue, min=0, max=100, initial=0,width = 400)
while(k<=length(searchstr))
{
lvalue<-paste("Searching for",searchstr[k])
if(substr(searchstr[k],1,1)=="#")
{
k<-k+1
next()
}
else
{
Log_file <- paste0(searchstr[k]," Log(Reddit).txt")
msg<-paste(msg,"\n",start_time,"Program starts execution for ",searchstr[k],sep=" ",collapse=" ")
#Formats the search term to search in Reddit
term<-gsub(" ","+",searchstr[k])
#Formats a regular expression for filtering the returned results
regular<-gsub(" ","|",searchstr[k])
#Initialize a message variable that will store everything related to the post
messages<-""
#Store the time for search initiation
search_init<-Sys.time()
#Fetch results from Reddit from the given search string
lvalue<-paste("Searching for",searchstr[k],"Started at",search_init)
msg<-paste(msg,"\n",search_init,"Search started for ",searchstr[k])
cat("Searching for ",searchstr[k])
setWinProgressBar(pb, k/(length(searchstr))*100, label=lvalue)
posts<-get_reddit(search_terms = term,regex_filter = regular,page_threshold = 1,sort_by = "relevance")
#Stores the end of search time
search_end<-Sys.time()
msg<-paste(msg,"\n",search_end,"Search completed")
#Creates a file name of the format "keyword Search(Reddit).txt" for storing post text, title and first comment"
filename<-paste0(opfile,searchstr[k]," Search(Reddit).txt")
#Creates a file name of the format "keyword Search Comments(Reddit).txt" for storing comments
#filecommname<-paste0(searchstr[k]," Search Comments(Reddit).txt")
#Stores the number of posts returned
l<-length(posts$id)
msg<-paste(msg,"\nSearch returned ",l," number of item(s)")
#Set loop counter
i<-1
#Saves the first post title
posttitle<-posts$title[1]
#The Reddit API does not differentiate between posts and their comments, so if a post has n comments
#The same title and text is repeated n times, to remove this redundancy, every time a new title is encountered, it is
#saved and the comments are collected for the rest
pb2<-winProgressBar(title="Processing Text",label = "Removing irrelevant data",min = 0,max=100,initial = 0)
while(i<=l)
{
setWinProgressBar(pb2,value=i/l*100.0)
#Checks for new post titles
#Storing the post text in a variable for removing spaces
posttext<-posts$post_text[i]
posttext<-gsub("\n","",posttext)
#posttext<-html2txt(posttext)
if(posttitle!=posts$title[i])
{
new_post<-Sys.time()
msg<-paste(msg,"\n",new_post,"New post title found\nThe new post id is ",posts$id[i]," Subreddit is ",posts$subreddit[i])
#cat("New Title found at ",i,"\n")
#Saving the new post title
posttitle<-posts$title[i]
#Checks for relevance of post title
if(length(grep(regular,posttitle,ignore.case = TRUE))>0)
{
msg<-paste(msg,"\nThe new post is relevant")
#Collects the first comment of the post
comments<-posts$comment[i]
posttitle<-gsub("\n","",posttitle)
comments<-gsub("\n","",comments)
#Checks the relevance of first comment
if(length(grep(regular,comments,ignore.case = TRUE))>0)
#Stores the relevant post title, post text and/or first comment
{
msg<-paste(msg,"\nThe first comment is relevant")
if(posttext!="")
{
messages<-paste0(messages,posttitle,"\n",posttext,"\n",comments,"\n")
}
else
{
messages<-paste0(messages,posttitle,"\n",comments,"\n")
}
#cat(iconv(x=posttitle,to = "UTF-8"),"\n",iconv(x=posttext,to = "UTF-8" ),"\n",iconv(x = comments,to = "UTF-8"),file = filename,append = TRUE)
}
else
{
msg<-paste(msg,"\nThe first comment is not relevant")
if(posttext!="")
{
messages<-paste0(messages,posttitle,"\n",posttext,"\n")
}
else
{
messages<-paste0(messages,posttitle,"\n")
}
#cat(iconv(x=posttitle,to = "UTF-8"),"\n",iconv(x =posttext,to = "UTF-8" ),file = filename,append = TRUE)
}
}
}
else
{
#Saves the comment
new_comment<-Sys.time()
comm<-posts$comment[i]
comm<-gsub("\n","",comm)
msg<-paste(msg,"\n",new_comment,"Comment retrieved from the post",sep="\t",collapse = "\t")
#Checks for relevance of the comment
if(length(grep(pattern = searchstr[k],comm,ignore.case = TRUE))>0)
{
msg<-paste(msg,"\nRelevant comment found for id ",i)
messages<-paste0(messages,comm,"\n")
#cat("\n",iconv(x=comm,to = "UTF-8"),"\n",file = filecommname,append = TRUE)
}
else
{
msg<-paste(msg,"\nRelevant comment not found for id ",i)
}
}
cleanText(filename)
i<-i+1
}
close(pb2)
cat(messages,file = filename)
cat(msg,file = Log_file)
k<-k+1
}
}
close(pb)
}
searchGP<-function(filename)
{
me<-paste("Searching in", filename)
print(me)
}
# Define server logic required to draw a histogram
shinyServer(function(input, output,session) {
observeEvent(
input$goButton,
{
filename<-input$inputfile
opfilename<-input$outputfile
if(input$fb)
{
output$textFB<-renderText(paste("Searching Facebook..."))
output$prog<-renderPrint(searchFB(filename))
}
if(input$tw)
{
output$textTW<-renderText(paste("Searching Twitter..."))
output$prog<-renderPrint(searchTW(filename))
}
if(input$rd)
{
output$textRD<-renderText(paste("Searched Reddit..."))
searchRD(filename,opfilename)
}
if(input$gp)
{
output$textGP<-renderText(paste("Searching Google Plus..."))
output$prog<-renderPrint(searchGP(filename))
}
}
)
# observe({
#   flag<-input$goButton
#   if(flag==TRUE)
#   {filename<-isolate(input$inputfile)
#   cat(filename)}
# })
# conn<-file(filename,open="r")
# linn<-readLines(conn)
# cat(filename)
})
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
runApp('Shiny Demos/FinalProject')
shiny::runApp('Shiny Demos/FinalProject')
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
?unlink
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("twitteR")
install.packages("RCurl")
install.packages("RFacebook")
install.packages("Rfacebook")
install.packages("plusser")
install.packages("RedditExtractoR")
runApp()
install.packages("ROAuth")
runApp()
install.packages("xml2")
runApp()
install.packages("RTools")
install.packages("rtools")
?zip
install.packages('zip')
runApp()
runApp()
shiny::runApp()
#Contains the access id for the Twitter App used for accessing twitter
access_id<-"jGTUM7YciMQu0ErgROG1rksoT"
#Contains the access secret for the Twitter App used for accessing twitter
access_secret<-"wKCLYlXi1ofP6We8UdOl3eMixMVR4JAfGynxlQv7lTl0EEZhfK"
#Contains the token id for the Twitter App used for accessing twitter(used for direct authentication without browser)
token_id<-"4030445255-weTTuRszPKDQlkUQIK2pjNrKWwGkyBJXFKGNiat"
#Contains the token secret for the Twitter App used for accessing twitter(used for direct authentication without browser)
token_secret<-"hJQHzMJgUqhyxbioOyKEwP4iZICdprzv2nFm1H9VhBNrL"
#Sets up the twitter session for crawling tweets
setup_twitter_oauth(access_id,access_secret,token_id,token_secret)
#Contains the access id for the Twitter App used for accessing twitter
access_id<-"jGTUM7YciMQu0ErgROG1rksoT"
#Contains the access secret for the Twitter App used for accessing twitter
access_secret<-"wKCLYlXi1ofP6We8UdOl3eMixMVR4JAfGynxlQv7lTl0EEZhfK"
#Contains the token id for the Twitter App used for accessing twitter(used for direct authentication without browser)
token_id<-"4030445255-weTTuRszPKDQlkUQIK2pjNrKWwGkyBJXFKGNiat"
#Contains the token secret for the Twitter App used for accessing twitter(used for direct authentication without browser)
token_secret<-"hJQHzMJgUqhyxbioOyKEwP4iZICdprzv2nFm1H9VhBNrL"
#Sets up the twitter session for crawling tweets
setup_twitter_oauth(access_id,access_secret,token_id,token_secret)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
?unlink
?inherits
runApp()
shiny::runApp()
shiny::runApp()
library('curl')
has_internet <- function(){
!is.null(curl::nslookup("www,google.com", error = FALSE))
}
has_internet()
library('curl')
has_internet <- function(){
!is.null(curl::nslookup("www.google.com", error = FALSE))
}
has_internet()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
